Beneficios
Comprobar los requerimientos de nuestra aplicación.
Documentación y ejemplos de nuestras clases.
Mediante Test Driven Development (TDD) nos puede ayudar en el diseño de clases.
Confianza al desarrollar.
Confianza para refactorizar nuestro código.
Es una habilidad que se solicita cada vez más en el mercado.
Existen test automáticos y manuales, los automáticos van a requerir tiempo de desarrollo y algunas veces no serán tan viables, pero de ser posible siempre trata de hacer test automáticos ya que:

Son más rápidos.
Son más fiables.
Son incrementales.
Tipos de test
Unitario: realizan pruebas a una función o clase muy concreta de nuestro proyecto.
Integración: prueban cómo se conectan diferentes componentes de nuestro proyecto.
Funcionales: prueban una funcionalidad de nuestro proyecto, pueden involucrarse varias clases.
Inicio a fin: prueba todo un proceso del proyecto.
Estrés: útil para probar si nuestra aplicación puede soportar grandes cantidades de procesos y peticiones a la vez.
--------------------------------------------------------------------------------

Vamos a utilizar una excepción con la 
función throw new RuntimeException("Error") 
en lugar de la función System.out.println("Error") 
para identificar más fácil los errores. Ahora, los mensajes tendrán un color diferente y pueden mostrarnos un poco más de información sobre los errores: ubicación, el resultado esperado, mensajes personalizados, entre otros.

------------------------------------------------------------------
<dependencies>
  <dependency>
    <groupId>junit</groupId>
    <artifactId>junit</artifactId>
    <version>4.12</version>
     <scope>test</scope>
  </dependency>
</dependencies>


Con @Before le indicamos a JUnit la función que debe ejecutar antes de cada prueba.

---------------------------------------------------------------
MOCKITO

<dependency>
  <groupId>org.mockito</groupId>
  <artifactId>mockito-core</artifactId>
  <version>2.23.4</version>
  <scope>test</scope>
</dependency>

Mockito nos va a servir para simular clases mientras probamos,
Para instanciar un mock debemos utilizar la función Mockito.mock() e indicarle como parámetro la clase que va a simular.
Las funciones assertFalse y assertTrue tal como su nombre lo indican, sirven para comprobar si un valor es igual a false o true respectivamente.


--------------------------------------------------------------------------
El Test Driven Development (TDD) o desarrollo guiado por test, creado por Kent Beck, consiste en escribir primero los test antes que las clases permitiéndote ver si el diseño de una clase es la adecuada.

El ciclo del TDD
Red: escribe un test que falle.
Green: escribe el código necesario para que pase el test.
Refactor: mejora el código.
Reglas
Sólo escribirás código de test hasta que falle.
Sólo escribirás código de producción para pasar el test.
No escribirás más código de producción del necesario.
Puedes combinar las reglas del TDD con su ciclo tal como hizo el profesor:

Red: Escribirás el mínimo de código test que falle.
Green: Escribirás el mínimo de código de producción que pase el test.
Refactor: sólo cuando los tests estén pasando.

------------------------------------------------------------------------------

Por lo general una aplicación se divide en:

Interfaz: Se encarga de la comunicación con el exterior o un usuario.
Negocio: Es la lógica de nuestra aplicación.
Datos: Se encarga de guardar los datos de nuestra aplicación.
Cada capa se puede comunicar con otra, pero no conoce los detalles de implementación.


----------------------------------------------------------------------------------

<dependency>
            <groupId>org.springframework</groupId>
            <artifactId>spring-jdbc</artifactId>
            <version>5.1.3.RELEASE</version>
        </dependency>

        <!-- https://mvnrepository.com/artifact/com.h2database/h2 -->
        <dependency>
            <groupId>com.h2database</groupId>
            <artifactId>h2</artifactId>
            <version>1.4.192</version>
      </dependency
------------------------------------------------------------------------------------



	
		
		
		




