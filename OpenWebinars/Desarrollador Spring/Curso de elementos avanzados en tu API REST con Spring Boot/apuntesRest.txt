
Paginación
Algunas de las clases/interfaces que se utilizan durante esta lección son estas:

PagingAndSortingRepository: https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/repository/PagingAndSortingRepository.html
Page: https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Page.html
Pageable: https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/domain/Pageable.html.
@PageableDefault: https://docs.spring.io/spring-data/commons/docs/current/api/org/springframework/data/web/PageableDefault.html
RFC 5988
Según el request for comments 5988, en un API Rest paginado deberíamos incluir el encabezado link, siguiendo una estructura como la que sigue en el ejemplo:

<http://localhost:8080/producto/?page=2&size=10>; rel="next", 
<http://localhost:8080/producto/?page=0&size=10>; rel="prev", 
<http://localhost:8080/producto/?page=0&size=10>; rel="first", 
<http://localhost:8080/producto/?page=2&size=10>; rel="last"


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Anotación @RequestParam
Esta anotación puede tomar los siguientes argumentos:

name o value: nombre del parámetro que vamos a recoger de la URL.
required: Indica si el parámetro es o no obligatorio.
defaultValue: proporciona un valor por defecto en el caso de que el usuario no lo haya proporcionado.
@RequestParam y Optional<T>
Podemos combinar el uso de @RequestParam para que, en lugar de recibir un parámetro String, Integer, Long, …, recibamos un Optional de algún tipo, con todas sus posibles ventajas:

@GetMapping("/path")
public ResponseEntity<?> controllerMethod(@RequestParam("param") Optional<String> param)
Si bien con la propia anotación @RequestParam podemos jugar con required y defaultValue, 
el uso de Optional nos permite construir métodos versátiles con garantías de evitar cadenas vacías, número inicializados a cero o situaciones similares.



-----------------------------------------------------------------------------------------------------------------------------------------------------------------


Criteria API
Criteria es una forma de realizar consultas en JPA. En lugar de utilizar el enfoque JPQL (similar a SQL), se trata de utilizar un enfoque programático. De hecho, suele ser muy cómodo para aquellos programadores que no se llevan muy bien con SQL o bases de datos relacionales. Dentro del paquete javax.persistencia.criteria encontramos todas las clases e interfaces que se pueden utilizar.

Puedes encontrar más información sobre Criteria en el tutorial de Java EE 7: https://docs.oracle.com/javaee/7/tutorial/persistence-criteria.htm#GJITV.

Specification Args Resolver
Se trata de un proyecto de Tomasz Kaczmarzyk (@tratif) para el filtrado fácil de datos con Spring MVC y Spring Data JPA. Nos permite evitar tener que definir una clase por cada Specification que queramos utilizar. A través de algunas anotaciones con argumentos, y con los mismos parámetros que reciben nuestros métodos en el controlador, esta librería es capaz de generar las consultas necesarias.

Puedes encontrar la información completa de este proyecto en su repositorio de github: https://github.com/tkaczmarzyk/specification-arg-resolver

Según la documentación de la librería, una petición como esta:

GET http://myhost/api/customers?firstName=Homer
podría ser manejada con un método como este:

@RequestMapping(value = "/customers", params = "firstName")
public Iterable<Customer> findByFirstName(  
      @Spec(path = "firstName", spec = Like.class) Specification<Customer> spec) {

    return customerRepo.findAll(spec);
}
Nótese el uso de la anotación @Spec, que permite indicar la especificación.

Esto daría como resultado la siguiente consulta:

select c from Customer c where c.firstName like '%Homer%'
Uso de la librería
Para utilizar esta librería, tenemos que añadir la siguiente dependencia maven:

<dependency>
    <groupId>net.kaczmarzyk</groupId>
    <artifactId>specification-arg-resolver</artifactId>
    <version>2.1.1</version>
</dependency>
Esta versión trabaja con Java 1.8 y ha sido compilada y probada con Spring Boot 2.1. En la web del proyecto se pueden encontrar versiones anteriores.

Y añadir en la configuración el bean SpecificationArgumentResolver.

@Configuration
public class MyConfig implements WebMvcConfigurer {

    @Override
    public void addArgumentResolvers(List<HandlerMethodArgumentResolver> argumentResolvers) {
        argumentResolvers.add(new SpecificationArgumentResolver());
    }

    ...
}

-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

La dependencia de Jackson para poder transformar en XML es:

<dependency>
    <groupId>com.fasterxml.jackson.dataformat</groupId>
    <artifactId>jackson-dataformat-xml</artifactId>
</dependency>


----------------------------------------------------------------------------------------------------------------------
JsonView
El ejemplo que se muestra a continuación se propone en el artículo https://spring.io/blog/2014/12/02/latest-jackson-integration-improvements-in-spring

Supongamos que tenemos dos clases a utilizar en algunos endpoints. En uno de ellos queremos mostrar solamente un resumen de los datos, y en el otro, una vista más completa. @JsonView nos permite realizar esto. Primero, definimos una vista:

public class View {
    interface Summary {}
}
Y a continuación, la utilizamos en nuestro modelo

public class User {

    @JsonView(View.Summary.class)
    private Long id;

    @JsonView(View.Summary.class)
    private String firstname;

    @JsonView(View.Summary.class)
    private String lastname;

    private String email;
    private String address;
    private String postalCode;
    private String city;
    private String country;
}

public class Message {

    @JsonView(View.Summary.class)
    private Long id;

    @JsonView(View.Summary.class)
    private LocalDate created;

    @JsonView(View.Summary.class)
    private String title;

    @JsonView(View.Summary.class)
    private User author;

    private List<User> recipients;

    private String body;
}
De esta forma, podemos crear un controlador con dos endpoints, y en uno de ellos podemos usar la vista Summary.

@RestController
public class MessageController {

    @Autowired
    private MessageService messageService;

    @JsonView(View.Summary.class)
    @RequestMapping("/")
    public List<Message> getAllMessages() {
        return messageService.getAll();
    }

    @RequestMapping("/{id}")
    public Message getMessage(@PathVariable Long id) {
        return messageService.get(id);
    }
}
El resultado que podríamos obtener si llamamos a getAllMessages() sería:

[ {
  "id" : 1,
  "created" : "2014-11-14",
  "title" : "Info",
  "author" : {
    "id" : 1,
    "firstname" : "Brian",
    "lastname" : "Clozel"
  }
}, {
  "id" : 2,
  "created" : "2014-11-14",
  "title" : "Warning",
  "author" : {
    "id" : 2,
    "firstname" : "Stéphane",
    "lastname" : "Nicoll"
  }
}, {
  "id" : 3,
  "created" : "2014-11-14",
  "title" : "Alert",
  "author" : {
    "id" : 3,
    "firstname" : "Rossen",
    "lastname" : "Stoyanchev"
  }
} ]
Observemos que, para cada mensaje, se muestran solo los campos marcados con @JsonView(Views.Summary.class) en el modelo. Sin embargo, si obtenemos un mensaje específicamente:

{
  "id" : 1,
  "created" : "2014-11-14",
  "title" : "Info",
  "body" : "This is an information message",
  "author" : {
    "id" : 1,
    "firstname" : "Brian",
    "lastname" : "Clozel",
    "email" : "bclozel@pivotal.io",
    "address" : "1 Jaures street",
    "postalCode" : "69003",
    "city" : "Lyon",
    "country" : "France"
  },
  "recipients" : [ {
    "id" : 2,
    "firstname" : "Stéphane",
    "lastname" : "Nicoll",
    "email" : "snicoll@pivotal.io",
    "address" : "42 Obama street",
    "postalCode" : "1000",
    "city" : "Brussel",
    "country" : "Belgium"
  }, {
    "id" : 3,
    "firstname" : "Rossen",
    "lastname" : "Stoyanchev",
    "email" : "rstoyanchev@pivotal.io",
    "address" : "3 Warren street",
    "postalCode" : "10011",
    "city" : "New York",
    "country" : "USA"
  } ]
}
Podemos utilizar herencia a la hora de definir las vistas. Supongamos que queremos tener una vista de resumen de los mensajes, pero con la lista de receptores:

public class View {
    interface Summary {}
    interface SummaryWithRecipients extends Summary {}
}
Nuestros modelos estarían anotados ahora así:

public class Message {

    @JsonView(View.Summary.class)
    private Long id;

    @JsonView(View.Summary.class)
    private LocalDate created;

    @JsonView(View.Summary.class)
    private String title;

    @JsonView(View.Summary.class)
    private User author;

    @JsonView(View.SummaryWithRecipients.class)
    private List<User> recipients;

    private String body;
}
En este caso, el controlador podría ser este:

@RestController
public class MessageController {

    @Autowired
    private MessageService messageService;

    @JsonView(View.SummaryWithRecipients.class)
    @RequestMapping("/with-recipients")
    public List<Message> getAllMessagesWithRecipients() {
        return messageService.getAll();
    }
}
De esta forma, el resultado podría ser:

[ {
  "id" : 1,
  "created" : "2014-11-14",
  "title" : "Info",
  "author" : {
    "id" : 1,
    "firstname" : "Brian",
    "lastname" : "Clozel"
  },
  "recipients" : [ {
    "id" : 2,
    "firstname" : "Stéphane",
    "lastname" : "Nicoll"
  }, {
    "id" : 3,
    "firstname" : "Rossen",
    "lastname" : "Stoyanchev"
  } ]

}, ... ]

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Evitar errores en asociaciones bidireccionales
Los expertos en JPA e Hibernate suelen recomendar tratar de forma bidireccional las asociaciones. De esta forma, se suele diseñar un mejor DDL, sobre todo para asociaciones one-to-many o many-to-many. Sin embargo, el uso de asociaciones bidirecionales con Lombok puede llegar a provocar algunos problemas de recursión infinita. Esta viene provocada por la propia bidireccionalidad.

Por ejemplo, un producto, asociado mediante many-to-one a una categoría, y esta a su vez asociada mediante one-to-many a un conjunto de productos. Cada uno de ellos, asociados, a su vez con la categoría, y así indefinidamente.

De nuevo, los expertos en JPA e Hibernate nos recomiendan dar un tratamiento especial a los métodos equals, hashCode y toString. Con todo, entrar en profundidad en esta materia queda fuera del alcance del curso.

En el ámbito de este curso, tenemos que dar una solución en dos niveles:

Solución a nivel de Lombok
Para solucionar el problema a nivel de lombok (métodos equals, hashCode y toString) podemos usar algunas anotaciones para excluir determinados campos de estos métodos, y cortar así la recursividad.

Estas anotaciones son @EqualsAndHashCode.Exclude y @ToString.Exclude. Deberíamos incluirlas en uno de los lados de la asociación (lo normal suele ser en el lado mappedBy).

// Anotaciones
public class LineaPedido {

    @ManyToOne
    @JoinColumn(name = "pedido_id")
    private Pedido pedido;

    // resto de atributos y métodos
}


// Anotaciones
public class Pedido {

    @EqualsAndHashCode.Exclude
    @ToString.Exclude
    @Builder.Default
    @OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<LineaPedido> lineas = new HashSet<>();

    // resto de atributos y métodos
}
Solución a nivel de Jackson
Esta recursividad infinita también nos afecta en la transformación hacia/desde JSON. Jackson ofrece un par de anotaciones para solucionar el problema:

JsonManagedReference: se coloca a nivel de atributo (que forme parte de una asociación bidireccional). Este será el lado que se serialice con normalidad.
JsonBackReference: es la anotación complementaria a la anterior. Suele anotarse sobre un bean, y no una colección. Este lado no se serializa.
// Anotaciones
public class LineaPedido {

    @JsonBackReference
    @ManyToOne
    @JoinColumn(name = "pedido_id")
    private Pedido pedido;

    // resto de atributos y métodos
}


// Anotaciones
public class Pedido {

    @JsonManagedReference
    @EqualsAndHashCode.Exclude
    @ToString.Exclude
    @Builder.Default
    @OneToMany(mappedBy = "pedido", cascade = CascadeType.ALL, orphanRemoval = true)
    private Set<LineaPedido> lineas = new HashSet<>();

    // resto de atributos y métodos
}
Reto interesante
En esta lección nuestra aplicación ha crecido un poco (sobre todo en modelo). Se propone completar la parte del controlador, realizando algunas tareas de las lecciones anteriores.

Crear un DTO para las peticiones GET (todos los recursos) para Pedido y Línea de pedido. Se puede realizar la transformación en una nueva clase Converter, y usando Lombok.
Crear una vista con @JsonView para las peticiones GET por ID, de forma que en las líneas de venta, para el atributo producto, no se muestre el precio (lo tenemos en línea de venta), ni la imagen ni la categoría.
Crear la petición GET por ID en el controlador, siguiendo el ejemplo de las que ya hemos realizado anteriormente (Producto, Categoría).
Crear la petición POST para insertar un nuevo Pedido con sus Líneas de pedido. Para ello, vamos a crear un par de DTOs

NuevoPedidoDTO, con nombre y Set<NuevaLineaPedidoDTO>
NuevaLineaPedidoDTO, con el ID del producto y la cantidad.

El conversor de NuevaLineaPedidoDTO a LineaPedido tendrá que usar el servicio de producto, para transformar un ID de producto en un Producto.

Crear la petición PUT, que será muy similar a las POST.
Crear la petición DELETE, que será muy parecida a la de producto (con la asociación bidireccional y el borrado en cascada, al borrar un Pedido, se borrarán sus LineaPedido asociadas).







...........................................................................................................................................


@JsonIdentityInfo
Según esta anotación, sirve para que los valores de tipo o propiedad anotados sean serializados para que las instancias contengan un identificador de objeto adicional, o como referencia que consiste en una identificación de objeto que se refiere a una serialización completa.

Se utiliza en asociaciones @OneToMany y @ManyToMany para romper referencias circulares o recursividad infinita.

Por ejemplo:

@JsonIdentityInfo(
  generator = ObjectIdGenerators.PropertyGenerator.class, 
  property = "id")
// Resto de anotaciones
public class Categoria {

    private int id;
    private String nombre;
    private List<Producto> productos;

    // Resto de métodos

}


@JsonIdentityInfo(
  generator = ObjectIdGenerators.PropertyGenerator.class, 
  property = "id")
// Resto de anotaciones
public class Producto {

    private int id;
    private String nombre;

    // Resto de atributos y anotaciones

    private Categoria categoria;


}
Si tenemos una categoría llamada Comida con dos productos llamados Pan y Aceite, el JSON de resultado podría ser:

{
    "id": 3,
    "nombre": "Aceite",
    "categoria": {
        "id": 1,
        "nombre": "Comida",
        "productos": [2, 3]
    }
}
Con todo, si se puede elegir, yo personalmente prefiero el uso de las anotaciones @JsonManagedReference o @JsonBackReference, vistas en la lección anterior.


.-----------------------------------------------------------------------------------------------------------------------------------------------------------------
El HAL Browser se encuentra deprecado, aunque sigue siendo ofrecido por el asistente a la hora de añadir las dependencias de un nuevo proyecto.

En lugar de él, podemos añadir el HAL Explorer, cuya dependencia es:

<dependency>
    <groupId>org.springframework.data</groupId>
    <artifactId>spring-data-rest-hal-explorer</artifactId>
    <version>3.2.0.RELEASE</version>
</dependency>
Si usamos Spring Boot, la versión no será necesaria.

----------------------------------------------------------------------------------------------------------------------------------------------------
instalación de Postgresql con docker
Tenemos que ejecutar los siguientes comandos

docker pull postgres
docker run --name postgresql1 -p 5432:5432 -e POSTGRES_PASSWORD=postgresql -d postgres
Las siguientes veces que queramos poner en ejecución el contenedor, podemos hacerlo o bien a través del Docker Explorer de Spring Tool Suite o con el siguiente comando:

docker start postgresql1
Conexión a través del cliente cli psql
Una vez que el contenedor ha iniciado, podemos ejectuar el cliente psql a través del siguiente comando

docker exec -ti postgresql1 psql -U postgres -W postgres
Instalación del cliente gráfico pgAdmin4
Se puede realizar también con Docker, a través de los siguientes comandos

docker pull dpage/pgadmin4
docker run --name pgadmin4 -p 5050:80 -e "PGADMIN_DEFAULT_EMAIL=user@domain.com" -e "PGADMIN_DEFAULT_PASSWORD=password" -d page/pgadmin4
En las siguientes ocasiones que queramos ponerlo en ejecución, debemos ejecutar

docker start pgadmin4
Para acceder, a través de nuestro navegador cargamos la http://localhost:5050.

¡OJO! Cuando vayamos a crear la conexión con nuestra base de datos, si introducimos localhost como URL no será capaz de conectar, porque entendrá como local el propio contenedor donde se ejecuta el cliente pgAdmin. Si introducimos la IP de nuestro ordenador, podremos conectar con tranquilidad.



----------------------------------------------------------------------------------------------------------------------------------------------------------------------

La dependencia necesaria para incluir Spring Boot Actuator en nuestro proyecto es:

<dependency>
    <groupId>org.springframework.boot</groupId>
    <artifactId>spring-boot-starter-actuator</artifactId>
</dependency>
Endpoints
Los endpoints de Actuator te permiten monitorear e interactuar con tu aplicación. Spring Boot incluye varios endpoints integrados y te permite agregar los tuyos propios. Por ejemplo, el endpoit health proporciona información básica de salud de la aplicación.

La lista completa de endpoints la puedes encontrar en https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints

Habilitar endpoints
Por defecto, la mayoría de los endpoints están habilitados. Si los quieres habilitar/deshabilitar, lo puedes hacer a través de propiedades. Por ejemplo, para habilitar el endpoint de shutdown lo haríamos así:

management.endpoint.shutdown.enabled=true
Exponer endpoints
Si bien la mayoría de los endpoints están habilitados, solo unos pocos están expuestos a través de la web.

La lista de endpoints expuestos por defecto y los que no lo están la puedes encontrar en https://docs.spring.io/spring-boot/docs/current/reference/html/production-ready-features.html#production-ready-endpoints-exposing-endpoints

Si queremos exponer uno, varios o todos los enpoints, también lo podemos hacer a través de propiedades.

management.endpoints.web.exposure.include=*
management.endpoints.web.exposure.exclude=env,beans
Esto nos permite exponer todos, salvo env y beans

Spring Boot Admin
Se trata de un proyecto no oficial que ofrece un GUI desarrollado en Angular.js para Spring Boot Actuator. Tiene un esquema de funcionamiento similar al de los microservicios.

Puedes encontrar información, el código fuente y screenshots sobre el proyecto en https://github.com/codecentric/spring-boot-admin.


-------------------------------------------------------------------------------------------------------------------------------------------------------------------
Versión mejorada de Dockerfile
Tal y como se propone en el tutorial de Dockerización de una aplicación Spring Boot, un fichero jar de una aplicación Spring Boot es por defecto, bastante pesado; este, además, suele tener varias capas, debido a como se realiza el empaquetado del propio jar. Si lo desempacamos y lo dividimos, podemos realizar una carga más rápida de nuestra aplicación. Esto lo podemos conseguir con el siguiente Dockerfile:

FROM openjdk:8-jdk-alpine
VOLUME /tmp
ARG DEPENDENCY=target/dependency
COPY ${DEPENDENCY}/BOOT-INF/lib /app/lib
COPY ${DEPENDENCY}/META-INF /app/META-INF
COPY ${DEPENDENCY}/BOOT-INF/classes /app
ENTRYPOINT ["java","-cp","app:app/lib/*","hello.Application"]
donde hello.Application es el nombre cualificado de la clase anotada con @SpringBootApplication en nuestro proyecto.







































































































































